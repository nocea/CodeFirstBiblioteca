// <auto-generated />
using System;
using BibliotecaDAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BibliotecaDAL.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20231108131719_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("BibliotecaDAL.Entidades.Acceso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_acceso");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("codigo_acceso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("descripcion_acceso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("accesos");
                });

            modelBuilder.Entity("BibliotecaDAL.Entidades.Autor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_autor");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("apellidos_autor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nombre_autor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Autor");
                });

            modelBuilder.Entity("BibliotecaDAL.Entidades.Estados_Prestamos", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_estado_prestamo");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("codigo_estado_prestamo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("descripcion_estado_prestamo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("estados_prestamos");
                });

            modelBuilder.Entity("BibliotecaDAL.Entidades.Libro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_libro");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<int>("cantidad_libro")
                        .HasColumnType("integer");

                    b.Property<string>("edicion_libro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("isbn_libro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("titulo_libro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("libros");
                });

            modelBuilder.Entity("BibliotecaDAL.Entidades.Prestamo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_prestamo");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("fch_entrega_prestamo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fch_fin_prestamo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fch_inicio_prestamo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("id_estados_prestamos")
                        .HasColumnType("bigint");

                    b.Property<long>("id_usuario")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("id_estados_prestamos");

                    b.HasIndex("id_usuario");

                    b.ToTable("prestamos");
                });

            modelBuilder.Entity("BibliotecaDAL.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_usuario");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<long>("Id"));

                    b.Property<string>("apellidos_usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("clave_usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("dni_usuario")
                        .HasColumnType("integer");

                    b.Property<bool>("estaBloqueado_usuario")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("fch_alta_usuario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fch_baja_usuario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("fch_fin_bloqueo_usuario")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("id_acceso")
                        .HasColumnType("bigint");

                    b.Property<string>("nombre_usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tlf_usuario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("id_acceso");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Rel_Autores_Libros", b =>
                {
                    b.Property<long>("listaAutoresId")
                        .HasColumnType("bigint");

                    b.Property<long>("listaLibrosId")
                        .HasColumnType("bigint");

                    b.HasKey("listaAutoresId", "listaLibrosId");

                    b.HasIndex("listaLibrosId");

                    b.ToTable("Rel_Autores_Libros");
                });

            modelBuilder.Entity("Rel_Prestamos_Libros", b =>
                {
                    b.Property<long>("listaLibrosId")
                        .HasColumnType("bigint");

                    b.Property<long>("listaPrestamosId")
                        .HasColumnType("bigint");

                    b.HasKey("listaLibrosId", "listaPrestamosId");

                    b.HasIndex("listaPrestamosId");

                    b.ToTable("Rel_Prestamos_Libros");
                });

            modelBuilder.Entity("BibliotecaDAL.Entidades.Prestamo", b =>
                {
                    b.HasOne("BibliotecaDAL.Entidades.Estados_Prestamos", "estados_prestamos")
                        .WithMany("listaPrestamos")
                        .HasForeignKey("id_estados_prestamos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaDAL.Usuario", "usuario")
                        .WithMany("listaPrestamos")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("estados_prestamos");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("BibliotecaDAL.Usuario", b =>
                {
                    b.HasOne("BibliotecaDAL.Entidades.Acceso", "acceso")
                        .WithMany("listaUsuarios")
                        .HasForeignKey("id_acceso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("acceso");
                });

            modelBuilder.Entity("Rel_Autores_Libros", b =>
                {
                    b.HasOne("BibliotecaDAL.Entidades.Autor", null)
                        .WithMany()
                        .HasForeignKey("listaAutoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaDAL.Entidades.Libro", null)
                        .WithMany()
                        .HasForeignKey("listaLibrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rel_Prestamos_Libros", b =>
                {
                    b.HasOne("BibliotecaDAL.Entidades.Libro", null)
                        .WithMany()
                        .HasForeignKey("listaLibrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaDAL.Entidades.Prestamo", null)
                        .WithMany()
                        .HasForeignKey("listaPrestamosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibliotecaDAL.Entidades.Acceso", b =>
                {
                    b.Navigation("listaUsuarios");
                });

            modelBuilder.Entity("BibliotecaDAL.Entidades.Estados_Prestamos", b =>
                {
                    b.Navigation("listaPrestamos");
                });

            modelBuilder.Entity("BibliotecaDAL.Usuario", b =>
                {
                    b.Navigation("listaPrestamos");
                });
#pragma warning restore 612, 618
        }
    }
}
